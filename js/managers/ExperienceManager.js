class ExperienceManager {
    constructor() {
        this.experiences = [];
        this.currentEditId = null;
        this.isInitialized = false;
    }

    async init() {
        if (this.isInitialized) return;

        try {
            await this.loadExperiences();
            this.bindEvents();
            this.isInitialized = true;
            console.log('ExperienceManager initialized');
        } catch (error) {
            console.error('ExperienceManager init error:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã');
        }
    }

    async loadExperiences() {
        this.showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã...');

        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –±—ç–∫–µ–Ω–¥–∞
            await Helpers.delay(1000);

            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
            // const response = await fetch('/api/experiences');
            // this.experiences = await response.json();

            // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            this.experiences = [
                {
                    id: 1,
                    company: "–¢–∏–Ω—å–∫–æ—Ñ—Ñ",
                    position: "Senior Product Designer",
                    period: "2021 ‚Äî –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è",
                    description: "–†—É–∫–æ–≤–æ–∂—É –¥–∏–∑–∞–π–Ω–æ–º –º–æ–±–∏–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞, —É–≤–µ–ª–∏—á–∏–ª–∏ NPS –Ω–∞ 15 –ø—É–Ω–∫—Ç–æ–≤ –∑–∞ –≥–æ–¥. –°–æ–∑–¥–∞–ª –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É –¥–ª—è 5+ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
                    isCurrent: true
                },
                {
                    id: 2,
                    company: "–°–±–µ—Ä",
                    position: "Middle UX/UI Designer",
                    period: "2019 ‚Äî 2021",
                    description: "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–∞–Ω–∫–∏–Ω–≥–∞. –£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã.",
                    isCurrent: false
                },
                {
                    id: 3,
                    company: "–Ø–Ω–¥–µ–∫—Å",
                    position: "UI Designer",
                    period: "2018 ‚Äî 2019",
                    description: "–°–æ–∑–¥–∞–≤–∞–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã. –†–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
                    isCurrent: false
                }
            ];

            this.render();
            Helpers.hideMessage();
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã');
            throw error;
        }
    }

    bindEvents() {
        const addBtn = document.getElementById('addExperienceBtn');
        const cancelBtn = document.getElementById('cancelBtn');
        const form = document.getElementById('experienceFormElement');

        if (addBtn) {
            addBtn.addEventListener('click', () => this.showForm());
        }

        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => this.hideForm());
        }

        if (form) {
            form.addEventListener('submit', (e) => this.handleFormSubmit(e));
        }
    }

    showForm(experience = null) {
        const form = document.getElementById('experienceForm');
        const formTitle = document.getElementById('formTitle');

        if (experience) {
            // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            formTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã';
            this.fillForm(experience);
            this.currentEditId = experience.id;
        } else {
            // –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            formTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã';
            this.clearForm();
            this.currentEditId = null;
        }

        form.style.display = 'block';
        form.scrollIntoView({behavior: 'smooth'});
    }

    hideForm() {
        const form = document.getElementById('experienceForm');
        if (form) {
            form.style.display = 'none';
        }
        this.clearForm();
        this.currentEditId = null;
    }

    fillForm(experience) {
        document.getElementById('companyName').value = experience.company;
        document.getElementById('position').value = experience.position;
        document.getElementById('workPeriod').value = experience.period;
        document.getElementById('workDescription').value = experience.description || '';
        document.getElementById('currentJob').checked = experience.isCurrent;
    }

    clearForm() {
        const form = document.getElementById('experienceFormElement');
        if (form) {
            form.reset();
        }
    }

    async handleFormSubmit(event) {
        event.preventDefault();

        const formData = {
            company: document.getElementById('companyName').value.trim(),
            position: document.getElementById('position').value.trim(),
            period: document.getElementById('workPeriod').value.trim(),
            description: document.getElementById('workDescription').value.trim(),
            isCurrent: document.getElementById('currentJob').checked
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!formData.company || !formData.position || !formData.period) {
            this.showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        await this.saveExperience(formData);
    }

    async saveExperience(experienceData) {
        this.showLoading('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');

        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
            await Helpers.delay(800);

            if (this.currentEditId) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
                await this.updateExperience(this.currentEditId, experienceData);
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                await this.createExperience(experienceData);
            }

        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
    }

    async createExperience(experienceData) {
        // –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞
        const newExperience = {
            id: Date.now(),
            ...experienceData,
            createdAt: new Date().toISOString()
        };

        this.experiences.unshift(newExperience);
        this.render();
        this.hideForm();
        this.showSuccess('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω');
    }

    async updateExperience(id, experienceData) {
        // –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞
        this.experiences = this.experiences.map(exp =>
            exp.id === id ? {...exp, ...experienceData} : exp
        );

        this.render();
        this.hideForm();
        this.showSuccess('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    async deleteExperience(id) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?')) return;

        this.showLoading('–£–¥–∞–ª–µ–Ω–∏–µ...');

        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞
            await Helpers.delay(600);

            this.experiences = this.experiences.filter(exp => exp.id !== id);
            this.render();
            this.showSuccess('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —É–¥–∞–ª–µ–Ω');
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }
    }

    render() {
        const container = document.getElementById('experienceList');
        if (!container) return;

        if (this.experiences.length === 0) {
            container.innerHTML = this.getEmptyState();
            return;
        }

        container.innerHTML = this.experiences.map(exp => `
            <div class="experience-item fade-in ${exp.isCurrent ? '' : 'past'}" data-id="${exp.id}">
                <div class="experience-actions">
                    <button class="action-btn edit-btn" onclick="app.experienceManager.edit(${exp.id})">
                        ‚úèÔ∏è
                    </button>
                    <button class="action-btn delete-btn" onclick="app.experienceManager.delete(${exp.id})">
                        üóëÔ∏è
                    </button>
                </div>
                <div class="experience-company">${Helpers.escapeHtml(exp.company)}</div>
                <div class="experience-position">${Helpers.escapeHtml(exp.position)}</div>
                <div class="experience-period">${Helpers.escapeHtml(exp.period)}</div>
                <div class="experience-description">${Helpers.escapeHtml(exp.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</div>
            </div>
        `).join('');
    }

    getEmptyState() {
        return `
            <div style="text-align: center; padding: 3rem; color: var(--text-muted);">
                <div style="font-size: 3rem; margin-bottom: 1rem;">üíº</div>
                <div style="font-weight: 500; margin-bottom: 0.5rem;">–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω</div>
                <div style="font-size: 0.9rem;">–ù–∞–∂–º–∏—Ç–µ "+" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã</div>
            </div>
        `;
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ HTML
    edit(id) {
        const experience = this.experiences.find(exp => exp.id === id);
        if (experience) {
            this.showForm(experience);
        }
    }

    delete(id) {
        this.deleteExperience(id);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    showLoading(text) {
        Helpers.showMessage(text, 'loading');
    }

    showSuccess(text) {
        Helpers.showMessage(text, 'success');
    }

    showError(text) {
        Helpers.showMessage(text, 'error');
    }
}